/*
 * Project : Simulation of a 3D Space Shuttle in outer space
 * Developer : Suraj Kumar Jana, @surajjana2
 * License : GPLv3
 */


#include<iostream>
#include<GL/glut.h>            // OpenGL Graphics Utility Library
#include <GL/glu.h>
#include<math.h>
#include <stdio.h>

using namespace std;

float tx=0,ty=0,tz=0, Trans_y=0, alpha=0, T_z=200, z_viewvol= -120, saturn_tx=0;
unsigned char mainkey='s';       // Controls Main Project in display function, default value: s: for start

// 0:Sun, 1:Jupiter, 2:RedPlanet, 3:Saturn, 4:BluePlanet, 5: LovePlanet 6: LastPlanet  {R, G, B, Tx, Ty, Tz, Radius}....eachplanet: SolidSphere
float planets[6][7]= { {0.96,0.96,0.5,0,65,-2400,60}, {1,0.1,0.1,80,-30,-3600,50}, {0.96,0.33,0.33,-300,0,-1800,30},
  {0.96,0.9,1,-440,20,-4200,50}, {0.67,0.95,0.365,100,0,-800,30}, {0.16,0.7,0.96,10,-70,-1600,50}  };

// {Base_Radius, Top_Radius, height, all-color}   // Seperate Color for array...
float BsterCylTypes[9][4]= {{1, 0.1, 3, 0.6}, {1, 0.9, 0.5, 0}, {2, 1, 3, 0.6}, {2, 2, 6, 0.6}, {2.05, 2.05, 0.3, 0},
      {2.2, 1.7, 1, 0}, {2.2, 1.7, 1, 0.4}, {2.7, 2.2, 1.5, 0.4}, {2.4, 1.8, 2, 0.6} };                        // total 9 rings

int BsterCylOrder[] = {0, 1, 2, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 5, 6, 5, 6, 5, 6, 7, 8};             // Total 19

float BlackStripPlate[7][4] = { {1.9,-6,13,10.31},  {11.7,-6,-13,10.31}, {-2.7,-11,43,7}, {16.2,-11,-42,7},
          {-3.8,-14,19,3.17}, {17.2,-14,-19,3.17}, {-3.8,-14,90,21} };

float Shuttle_Plates[3][4] = { {-6,10,1,0.5}, {-11,5,1.9,1}, {-14,3,2.1,1.9} };

GLUquadricObj* leftbooster, *maintank, *shuttle;
GLfloat pos[]= { -10, 20, -60, 1};						//light position         //{-2,4,5,1}
GLfloat amb [] = {0.7, 0.7, 0.7, 1.0};				//Ambient intensity
GLfloat front_amb_diff[]= {0.8, 0.7, 0.7,1.0};	//Front side property
GLfloat back_amb_diff[]= {0.4,0.7,0.1,1.0};		//Back side property
GLfloat spe[]= {0.25,0.25,0.25,1.0};			//Property for front and back
GLfloat spe2[]= {80};			            //Property for front and back
GLfloat theta=0,dt=0.7, axes[3][3] = {{1,0,0},{0,1,0},{0,0,1}};
int axis = 0; 					         	//0:x, 1:Y, 2:Z, 3:light aroundz


void shuttle_main_tank(){
	glPushMatrix ();
	   maintank = gluNewQuadric();
   	   gluQuadricDrawStyle(maintank, GLU_FILL);
       gluQuadricNormals(maintank, GLU_SMOOTH);
       gluQuadricOrientation(maintank, GLU_OUTSIDE);

	   glColor3f(1, 0.51, 0.04);
  	   // for Top of Main Orange Color Tank
	   float h=0;
	   for(float r= 4.7; r>=0; r-= 0.5){

			glPushMatrix();
			   glTranslated(7.5, 22+h, 0);         // Flexible to take it up and down
			   glTranslated(0, 0, z_viewvol);            // Translation ....must for cylinders
               glRotated(-90, 1, 0, 0);              // Rotation.....must for cylinders
			   gluCylinder(maintank, r, r, 1 , 100, 100);
			   h++;
	  	    glPopMatrix();
	   }

	   glTranslated(7.5, -18, z_viewvol);
	   glRotated(-90, 1, 0, 0);
	   gluCylinder(maintank, 4.7, 4.7, 40, 32, 32);                  // Main Tank...orange color...completes main cylinder
	glPopMatrix();

	glPushMatrix();                          // for spherical bottom of main tank...
	   glTranslated(7.5, -18, z_viewvol);
       glRotated(-90, 1, 0, 0);                    // Rotate Cylinder along X-axis...to make it look vertical
	   glutSolidSphere(4.7, 32, 32);
	glPopMatrix();
}

float random(int min, int max){            // random function: self defined....needed to throw flames

   again: int i=(rand()%100)/10;
   if(max < 7){
	  if(i==8||i==7)
	    i= -1;
	  else if(i==9)
	    i = -2;
   }

   if(i>=min && i<=max)
	  return i;
	else
	 goto again;
}

float random2(int min, int max){                // needed to throw flames

  again: int i=(rand()%100);
  if(i>=min && i<=max)
	  return i;
  else
	 goto again;
}

void fire(int j){

	glPushMatrix();
	    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
        glBlendFunc(GL_SRC_ALPHA, GL_ONE);
	    glEnable(GL_BLEND);

		float flamethrower[5][3]={ {7,-20, 8.5}, {6,-20,7.5}, {8,-20,7.5}, {0,-25,0}, {15,-25,0}  };    // {T_x, T_y, T_z} for diferent boosters and shuttle

		for(int i=0; i<200; i++){
	       glPushMatrix();
			  glTranslated(flamethrower[j][0] + random(-3,3), flamethrower[j][1]-random2(0,20), flamethrower[j][2]+random(0,5));
	          glTranslated(0, 0, z_viewvol);                // Translation ....must for cylinders

			  if(i%3==0){
			      glColor3f(1,0.46, 0);
				  glutWireSphere(0.5, 32,32);
			   }
               else if(i%2==0)
			   { glColor3f(1,0.64,0);
				 glutWireTetrahedron();
			  }
			  else{
				  glColor3f(0.95,0.95,0.2);
				  glutSolidOctahedron();
			  }
		   glPopMatrix();
	     }  // for loop ends here

	   glDisable(GL_BLEND);
	glPopMatrix();
}

void shuttle_leftBooster(bool callfromRight){               // left solid booster

   	   leftbooster = gluNewQuadric();
   	   gluQuadricDrawStyle(leftbooster, GLU_FILL);
       gluQuadricNormals(leftbooster, GLU_SMOOTH);
       gluQuadricOrientation(leftbooster, GLU_OUTSIDE);

       int j, height=0;       // j to control other array.....height(in the upcoming loop) from prev. loop case...used in next case...
       for(int i=0; i < 21; i++){
		    j = BsterCylOrder[i];
	        height = height + BsterCylTypes[j][2];         // Total Height needed for translation
			glPushMatrix();
		       glColor3f(BsterCylTypes[j][3], BsterCylTypes[j][3], BsterCylTypes[j][3]);
			   glTranslated(0, 20-height, 0);         // Flexible to take it up and down
			   glTranslated(0, 0, z_viewvol);
               glRotated(-90, 1, 0, 0);              // Rotation.....must for cylinders
               gluCylinder(leftbooster, BsterCylTypes[j][0], BsterCylTypes[j][1], BsterCylTypes[j][2], 40, 100);
	  	    glPopMatrix();
	   }
	  if(callfromRight==true)
	    return;

	  fire(3);
}


void shuttle_rightBooster(){              // right solid booster
	glPushMatrix ();
       glTranslated(15, 0, 0);
	   shuttle_leftBooster(true);
    glPopMatrix();
	fire(4);                            // Starts fire for Right Booster
}

// Assembles all part of Space Shuttle: L and R Boosters, Main Tank, Main Shuttle-Discovery
void shuttle_main(){
	shuttle_leftBooster(false);        // false: for not calling from right booster function...
    shuttle_rightBooster();
    shuttle_main_tank();
}


void BackGroundSphere(){

  glPushMatrix();
   glColor3f(1, 1, 1);
   glTranslated(0, 0, -4000);
   glutWireSphere(4000, 12, 12);                      // Big Wire Sphere.....to give feel of order in Solar System
  glPopMatrix();
}

void Jupiter_Moon(){
  // Array stores...{Tx, Tz} of Moons to display them near Jupiter
  int moon[3][2] = {{20, -3600}, {80, -3540}, {80, 3660}};
  for(int i=0; i<3; i++){
     glPushMatrix();
       glColor3f(1, 0.8, 0.8);
       glTranslated(moon[i][0], -20, moon[i][1]);                     // centre at Tx, Ty, Tz
       glutSolidSphere(5, 32, 32);                     //radius: 50
     glPopMatrix();
   }
}

void AllPlanets(){                              // All planets and Sun

  for(int i=0; i<6;i++){
    glPushMatrix();
      glColor3f(planets[i][0], planets[i][1], planets[i][2]);
      if(i==3){
		  glTranslated(planets[i][3]+saturn_tx, planets[i][4], planets[i][5]);
		  saturn_tx += 1;
	  }else{
	      glTranslated(planets[i][3], planets[i][4], planets[i][5]);                // centre at Tx, Ty, Tz
	   }
	   glutSolidSphere(planets[i][6], 32, 32);
    glPopMatrix();
  }
}

void Display_Contol_Menu(){

	fprintf(stdout, "Space Shuttle Project: By Spacehacker");
    cout<<"\n\nPress 's' to Start Main Project...."<<endl;
	cout<<"Press 'g' to see Solar System or Galaxy..."<<endl;
	cout<<"Press 'l' to see booster only"<<endl;
	cout<<"Press 'm' to see orange main tank only\n";
}

void keyboard(unsigned char key, int x, int y){
  if(key=='s'||key=='o'||key=='r'||key=='d'||key=='g'||key=='p'||key=='l'||key=='k'||key=='m' )
	 {    mainkey = key;                // main key used in display function...
     if (key=='p')
		theta = 45;
	else if(key == 's')
	{
	  theta = 0;
	  T_z = 200;
	}

  }
  else{
     mainkey='s';

  }

	glutPostRedisplay();

}

void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glPushMatrix();		//Preserve the CTM that Puts the objects in View Volume.

	  glLightfv(GL_LIGHT0, GL_POSITION, pos);                  // lighting on shuttle

 switch(mainkey){

   case 's':{
   shuttle_main();
		   break;        // case 's': start ends here
		 }

   case 'o': shuttle_main();                   // Case: 'o'  for only shuttle....display shuttle only
	         break;
   case 'r': glTranslated(6.7, 0, -100);         // case: 'r' for main shuttle in differetn view
	         glRotated(-40, 1, 0, 0);
	         glTranslated(-6.7, 0, 100);
	         shuttle_main();
             break;
   case 'd': glTranslated(6.7, 0, -100);          // case: 'd' for main shuttle in different view...along z-axis
	         glRotated(-40, 1, 0, 1);
	         glTranslated(-6.7, 0, 100);
	         shuttle_main();
             break;
   case 'g':  BackGroundSphere();                 // case: 'g' for galaxy view...or solar system view
		      AllPlanets();
		      Jupiter_Moon();
		      break;
   case 'l': shuttle_leftBooster(false);
	         break;
   case 'm': shuttle_main_tank();
	         break;
   }// Switch ends here

	glPopMatrix();  						         //restore CTM for object
	glutSwapBuffers();
}

void idle(void){
	theta = (theta <360) ? theta+dt:dt; //increment rotation angle
	tx= tx - 0.05;
	ty = ty + 0.08;
	glutPostRedisplay();
}

int main(int argc, char **argv){

	 pos[2] = z_viewvol+20;                // To automatically set the position of Light....with view volume in Z-direction
	 glutInit(&argc, argv);
	 glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
     glutInitWindowSize(800, 600);
     glutInitWindowPosition(200, 100);
	 glutCreateWindow("Space shuttle animation by Spacehacker");
     glClearColor(0, 0, 0, 0);       //sets background color (r,g,b,alpha) for the window.
	 glEnable(GL_DEPTH_TEST);		 //To remove depth buffer
	 glMatrixMode(GL_PROJECTION);
     glLoadIdentity();				//identity matrix for preojection
	 gluPerspective(45, 1, 20, 9000);

	 glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, front_amb_diff);    //Front side
	 glMaterialfv(GL_BACK, GL_AMBIENT_AND_DIFFUSE, back_amb_diff);      //Back side
	 glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, spe);                //Front and back
	 glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, spe2);              //Front and back

	 glLightfv(GL_LIGHT0, GL_AMBIENT, amb); 	//light source
	 glLightModeli(GL_LIGHT_MODEL_TWO_SIDE, GL_TRUE); 	//for solid cone

	 glMatrixMode(GL_MODELVIEW);
     glLoadIdentity();				//Identity matrix for Modelview

	 glLightfv(GL_LIGHT0, GL_POSITION, pos); //light postion is affected by current modelview
	 glEnable(GL_LIGHTING); 	//enable light
	 glEnable(GL_LIGHT0); 		//enable gl_light0
	 glEnable(GL_COLOR_MATERIAL);             // Enable Color Material
	 Display_Contol_Menu();

     glutDisplayFunc(display);        //register display call back function
	 glutKeyboardFunc(keyboard);
	 glutIdleFunc(idle);
     glutMainLoop();                     //enter event-processing loop, always needs this line.
}
